@model Project.ViewModels.CartCheckoutViewModel

<h2>Giỏ hàng</h2>

<table class="table">
    <thead>
        <tr>
            <th>Sản phẩm</th>
            <th>Giá</th>
            <th>Số lượng</th>
            <th>Thành tiền</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.CartItems)
        {
            <tr data-product-id="@item.Product.Id">
                <td>@item.Product.Name</td>
                <td class="unit-price">@item.Product.Price</td>
                <td>
                    <input type="number" class="qty-input form-control" value="@item.Quantity" min="1" />
                </td>
                <td class="item-total">@((item.Product.Price * item.Quantity))</td>
                <td><a href="/Cart/RemoveFromCart/@item.Product.Id">Xóa</a></td>
            </tr>
        }
    </tbody>
</table>

<!-- Form nhập thông tin đặt hàng -->
<h3>Thông tin đặt hàng</h3>
<form asp-action="CheckoutTemp" method="post">
    <div class="form-group">
        <label>Họ tên</label>
        <input asp-for="OrderInfo.FullName" class="form-control" />
    </div>
    <div class="form-group">
        <label>Điện thoại</label>
        <input asp-for="OrderInfo.Phone" class="form-control" />
    </div>
    <div class="form-group">
        <label>Địa chỉ</label>
        <textarea asp-for="OrderInfo.Address" class="form-control"></textarea>
    </div>
    <button type="submit" class="btn btn-success">Đặt hàng</button>
</form>

@section Scripts {
    <script>
        // Duyệt qua tất cả các ô nhập số lượng sản phẩm trong giỏ hàng
        document.querySelectorAll('.qty-input').forEach(input => {
            // Gắn sự kiện khi người dùng thay đổi giá trị số lượng
            input.addEventListener('change', function () {
                // Tìm thẻ <tr> cha chứa ô input, tức là dòng sản phẩm
                const tr = input.closest('tr');

                // Lấy productId từ thuộc tính data-product-id trong <tr>
                const productId = tr.getAttribute('data-product-id');

                // Lấy giá trị số lượng mới người dùng nhập vào
                const newQuantity = parseInt(input.value);

                // Gửi yêu cầu POST đến server để cập nhật số lượng sản phẩm trong giỏ hàng
                fetch('/Cart/UpdateQuantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json', // Dữ liệu gửi đi là JSON
                        // Token để chống giả mạo yêu cầu (CSRF), cần có trong ASP.NET
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    // Gửi dữ liệu gồm productId và quantity dưới dạng JSON
                    body: JSON.stringify({ productId, quantity: newQuantity })
                }).then(res => {
                    if (res.ok) {
                        // Nếu server trả về thành công (status 200)

                        // Lấy đơn giá từ cột .unit-price, loại bỏ dấu phẩy và chuyển thành số
                        const unitPrice = parseFloat(tr.querySelector('.unit-price').innerText.replace(/,/g, ''));

                        // Tính lại tổng tiền = đơn giá * số lượng
                        const total = unitPrice * newQuantity;

                        // Hiển thị lại tổng tiền ở cột .item-total, dùng toLocaleString để format số
                        tr.querySelector('.item-total').innerText = total.toLocaleString();

                        // TODO: Bạn có thể cập nhật tổng đơn hàng toàn trang ở đây nếu muốn
                    } else {
                        // Nếu server trả về lỗi (400/500), hiển thị cảnh báo
                        alert("Lỗi khi cập nhật giỏ hàng");
                    }
                });
            });
        });
    </script>

}
